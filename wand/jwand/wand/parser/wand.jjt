/*

Task: Make this parser implement a basic Wand language instead

Program -> Declarations

Declarations -> Declaration [Declarations]

Declaration -> FunctionDeclaration

FunctionDeclaration -> "void" Identifier "(" ")" "{" FunctionBody "}"

FunctionBody -> FunctionDeclaration


*/



/* This example shows how to specify a simple parser for a toy calculator
   language with floats, multiplication, and let-expressions.
   Here is an example program in this language:
   
      let radius = 5.0 in
        let pi = 3.14 in
          2.0 * pi * radius 

*/

options {
    MULTI=true;
	NODE_EXTENDS="wand.core.WandNode";
	NODE_PACKAGE="wand.parser";
}


/* *** Specification of the parser class *** */

PARSER_BEGIN(WandParser)
package wand.parser;

public class WandParser {}
PARSER_END(WandParser)

/* *** Token specification *** */

/* Skip whitespace */
SKIP : { " " | "\t" | "\n" | "\r" }

/* Reserved words */
TOKEN: {
	< VOID: "void">
|	< INT: "int">
|	< FLOAT: "float">
}

/* Literals */
TOKEN: {
  < FPLIT: (["0"-"9"])+ "." (["0"-"9"])+ >    // Floating point literal
| < INTLIT: (["0"-"9"])+ >    // Integer literal
}

/* Operators */
TOKEN: {
  < LPAREN: "(" >
| < RPAREN: ")" >
| < OPENBLOCK: "{" >
| < CLOSEBLOCK: "}" >

| < OPINC: "++" >
| < OPDEC: "--" >

| < OPADD: "+" >
| < OPSUB: "-" >

| < OPASSIGN: "=" >

}

/* Identifiers */
TOKEN: {
  < ID: (["A"-"Z", "a"-"z", "_"])(["A"-"Z", "a"-"z", "_", "0"-"9"])* >
}

/* *** Context-free grammar (EBNF) *** */

/* The start nonterminal and its productions. */

ASTProgram Program() : {
    ASTDeclarations declarations;
}
{
    (
        declarations=Declarations()
        {
            jjtThis.setDeclarations( declarations );
        }
    )
    
    { return jjtThis; }
}

/* Other nonterminals and their productions */

// Declarations -> Declaration [Declarations]
ASTDeclarations Declarations() : {
    ASTDeclarations rest;
    ASTDeclaration declaration;
}
{
    (
	    declaration=Declaration() [ rest=Declarations() { jjtThis = rest; } ]
	)
	
	{
	    jjtThis.addDeclaration( declaration );
	    return jjtThis;
	}
}



// Declaration -> FunctionDeclaration
ASTDeclaration Declaration() : {}
{
	(
	    jjtThis=FunctionDeclaration()
	)
	
	{ return jjtThis; }
}

// FunctionDeclaration -> "void" Identifier "(" ")" "{" FunctionBody "}"
ASTFunctionDeclaration FunctionDeclaration() : {
	Token functionName;
}
{
	(
	    Type() functionName=<ID> <LPAREN> <RPAREN> Block()
	    { jjtThis.setFunctionName( functionName.image ); }
	)
	
	{ return jjtThis; }
}

// FunctionBody -> FunctionDeclaration
/*ASTFunctionBody FunctionBody() : {}
{
    { return jjtThis; }
}*/

// Type ->
void Type() : {}
{
	BuiltinType() [ArrayType()]
}

void BuiltinType() : {}
{
	"void" | "int" | "float" | <ID>
}

void ArrayType() : {}
{
	"[" "]" [ ArrayType() ]
}





void QualifiedIdentifier() : {}
{
    (
        <ID> [ "." QualifiedIdentifier() ]
    )
}

void Literal() : {}
{
    (
        IntegerLiteral() |
        FloatingPointLiteral()/* |
        CharacterLiteral() |
        StringLiteral() |
        BooleanLiteral() |
        NullLiteral()*/
    )
}

void Expression() : {}
{
    AssignExpression()
}

void AssignExpression() : {}
{
    // was: InfixExpression() [AssignOperator() InfixExpression()]
    // but this allowed syntax "3 += 1" which would be invalid and need
    // to be picked up elsewhere
    [<ID> AssignOperator()] InfixExpression()
}

void InfixExpression() : {}
{
    PrefixExpression() [InfixOperator() PrefixExpression()]
}

void PrefixExpression() : {}
{
    PrefixOperator() PrefixExpression() |
    PostfixExpression()
}

void PostfixExpression() : {}
{
    Primary() (PostfixOperator())*
    
}

void Primary() : {}
{
    <LPAREN> Expression() <RPAREN> |
    Literal()
}



void AssignOperator() : {}
{
    "=" |
    "+=" |
    "-=" |
    "*=" |
    "/=" |
    "&=" |
    "|=" |
    "^=" |
    "%=" |
    "<<=" |
    ">>=" |
    ">>>="
}

void InfixOperator() : {}
{
    "||" |
    "&&" |
    "|" |
    "^" |
    "&" |
    "==" |
    "!=" |
    "<" |
    ">" |
    "<=" |
    ">=" |
    "<<" |
    ">>" |
    ">>>" |
    "+" |
    "-" |
    "*" |
    "/" |
    "%"
}

void PrefixOperator() : {}
{
    "++" |
    "--" |
    "!" |
    "~" |
    "+" |
    "-"
}

void PostfixOperator() : {}
{
    "++" | "--"
}



void IntegerLiteral() : {}
{
    <INTLIT>
}

void FloatingPointLiteral() : {}
{
    <FPLIT>
}

void CharacterLiteral() : {}
{
    <FPLIT>
}

void StringLiteral() : {}
{
    <FPLIT>
}

void BooleanLiteral() : {}
{
    <FPLIT>
}

void NullLiteral() : {}
{
    <FPLIT>
}



void Block() : {}
{
    "{" BlockStatements() "}"
}

void BlockStatements() : {}
{
    (BlockStatement())*
}

void BlockStatement() : {}
{
    LOOKAHEAD(2)
    LocalVariableDeclarationStatement() |
    Statement()
}

void LocalVariableDeclarationStatement() : {}
{
    Type() VariableDeclarators() ";"
}

void Statement() : {}
{
    Block() |
    ExpressionStatement()
}

void ExpressionStatement() : {}
{
    Expression() ";"
}

void VariableDeclarators() : {}
{
    VariableDeclarator() ("," VariableDeclarator())*
}

void VariableDeclarator() : {}
{
    Identifier() ["=" VariableInitializer()]
}

void VariableInitializer() : {}
{
    Expression()
    // | ArrayInitializer()
}



void Identifier() : {}
{
    <ID>
}