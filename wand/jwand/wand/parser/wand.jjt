options {
    MULTI=true;
	NODE_EXTENDS="wand.core.WandNode";
	NODE_PACKAGE="wand.parser";
	VISITOR=true;
}


/* *** Specification of the parser class *** */

PARSER_BEGIN(WandParser)
package wand.parser;

public class WandParser {}
PARSER_END(WandParser)

/* *** Token specification *** */

/* Skip whitespace */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

/* Reserved words */
TOKEN: {
	< VOID: "void">
|	< INT: "int">
|	< FLOAT: "float">
}

/* Literals */
TOKEN: {
  < FLOAT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])+ >    // Floating point literal
| < INTEGER_LITERAL:
      <DECIMAL_LITERAL> (["l","L"])?
    | <HEX_LITERAL> (["l","L"])?
    | <OCTAL_LITERAL> (["l","L"])?
    | <BINARY_LITERAL> (["l","L"])?
  >

| < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
| < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
| < #BINARY_LITERAL: "0" ["b","B"] (["0"-"1"])+ >
| < #OCTAL_LITERAL: "0" (["0"-"7"])* >

| "null"
| "true"
| "false"
}

/* Operators */
TOKEN: {
  < LPAREN: "(" >
| < RPAREN: ")" >
| < OPENBLOCK: "{" >
| < CLOSEBLOCK: "}" >

| < OP_INC: "++" >
| < OP_DEC: "--" >

| < OP_ADD: "+" >
| < OP_SUB: "-" >

| < OP_MUL: "*" >
| < OP_DIV: "/" >
| < OP_MOD: "%" >

| < OP_ASSIGN: "=" >

| < OP_ADD_ASSIGN: "+=" >
| < OP_SUB_ASSIGN: "-=" >

| < OP_MUL_ASSIGN: "*=" >
| < OP_DIV_ASSIGN: "/=" >
| < OP_MOD_ASSIGN: "%=" >

| < MODIFIER_PUBLIC: "public" >
| < MODIFIER_PRIVATE: "private" >
| < MODIFIER_PROTECTED: "protected" >
| < MODIFIER_STATIC: "static" >
| < MODIFIER_ABSTRACT: "abstract" >
| < MODIFIER_FINAL: "final" >
| < MODIFIER_COMPAT: "compat" >

| < MODIFIER_ARG: ":" >

| < STMT_RETURN: "return" >

| < STMT_IF: "if" >
| < STMT_ELSE: "else" >
| < STMT_DO: "do" >
| < STMT_WHILE: "while" >
| < STMT_FOR: "for" >
| < STMT_FOREACH: "foreach" >

}

/* Identifiers */
TOKEN: {
  < ID: (["A"-"Z", "a"-"z", "_"])(["A"-"Z", "a"-"z", "_", "0"-"9"])* >
}

/* *** Context-free grammar (EBNF) *** */

/* The start nonterminal and its productions. */

ASTProgram Program() : {
    ASTDeclarations declarations;
}
{
    Declarations()
    
    { return jjtThis; }
}

/* Other nonterminals and their productions */

// Declarations -> Declaration [Declarations]
void Declarations() : {
    ASTDeclaration declaration;
}
{
    ( Declaration() )*
}



// Declaration -> FunctionDeclaration
void Declaration() #void : {}
{
	DecoratedFunctionDeclaration()
}

void DecoratedFunctionDeclaration() : {}
{
    Modifiers() FunctionDeclaration()
}

void Modifiers() : {}
{
    (Modifier())*
}

void Modifier() : {}
{
    "public" |
    "private" |
    "protected" |
    "static" |
    "abstract" |
    "final" |
    "compat" ":" <ID>
}

// FunctionDeclaration -> "void" Identifier "(" ")" "{" FunctionBody "}"
void FunctionDeclaration() : {
	Token functionName;
}
{
	(
	    Type() functionName=<ID> FunctionParameters() Block()
	    { jjtThis.setFunctionName( functionName.image ); }
	)
}

void FunctionParameters() : {}
{
    <LPAREN> [FunctionParameter() ("," FunctionParameter())*] <RPAREN>
}

void FunctionParameter() : {}
{
    Type() Identifier() ["=" VariableInitializer()]
}

// FunctionBody -> FunctionDeclaration
/*ASTFunctionBody FunctionBody() : {}
{
    { return jjtThis; }
}*/

// Type ->
void Type() #void : {}
{
    LOOKAHEAD(2)
    ArrayType() |
	BuiltinType()
}

void BuiltinType() : {
    Token t;
}
{
	(
	    t="void" | 
	    t="int" | 
	    t="float" | 
	    t=<ID>
	)
	
	{ jjtThis.setTypeName( t.image ); }
}

void ArrayType() : {}
{
	BuiltinType() ("[" "]")+
}





void QualifiedIdentifier() : {}
{
    (
        <ID> [ "." QualifiedIdentifier() ]
    )
}

void Literal() #void : {}
{
    (
        IntegerLiteral() |
        FloatingPointLiteral() |
        /*CharacterLiteral() |
        StringLiteral() |*/
        BooleanLiteral() |
        NullLiteral()
    )
}

void Expression() #void : {}
{
    AssignExpression()
}

void AssignExpression() #AssignExpression(>1) : {}
{
    // was: InfixExpression() [AssignOperator() InfixExpression()]
    // but this allowed syntax "3 += 1" which would be invalid and need
    // to be picked up elsewhere
    LOOKAHEAD(2)
    Identifier() AssignOperator() InfixExpression() |
    InfixExpression()
}

void InfixExpression() #InfixExpression(>1) : {}
{
    MulInfixExpression() [InfixOperator() InfixExpression()]
}

void MulInfixExpression() #InfixExpression(>1) : {}
{
    PrefixExpression() [MulInfixOperator() MulInfixExpression()]
}

void PrefixExpression() #PrefixExpression(>1) : {}
{
    PrefixOperator() PrefixExpression() |
    PostfixExpression()
}

void PostfixExpression() #PostfixExpression(>1) : {}
{
    Primary() (PostfixOperator())*
    
}

void Primary() #void : {}
{
    <LPAREN> Expression() <RPAREN> |
    Literal() |
    Identifier()
}



void AssignOperator() : {
    Token t;
}
{
    (
        t="=" |
        t="+=" |
        t="-=" |
        t="*=" |
        t="/=" |
        t="&=" |
        t="|=" |
        t="^=" |
        t="%=" |
        t="<<=" |
        t=">>=" |
        t=">>>="
    )
    
    { jjtThis.setTokenType( t.kind ); }
}

void InfixOperator() : {
    Token t;
}
{
    (
        t="||" |
        t="&&" |
        t="|" |
        t="^" |
        t="&" |
        t="==" |
        t="!=" |
        t="<" |
        t=">" |
        t="<=" |
        t=">=" |
        t="<<" |
        t=">>" |
        t=">>>" |
        t="+" |
        t="-"
    )
    
    { jjtThis.setTokenType( t.kind ); }
}

void MulInfixOperator() #InfixOperator : {
    Token t;
}
{
    (
        t="*" |
        t="/" |
        t="%"
    )
    
    { jjtThis.setTokenType( t.kind ); }
}

void PrefixOperator() : {}
{
    "++" |
    "--" |
    "!" |
    "~" |
    "+" |
    "-"
}

void PostfixOperator() : {}
{
    "++" | "--"
}



void IntegerLiteral() : {
    Token t;
}
{
    t=<INTEGER_LITERAL>
    { jjtThis.fromString( t.image ); }
}

void FloatingPointLiteral() : {}
{
    <FLOAT_LITERAL>
}
/*
void CharacterLiteral() : {}
{
    <FPLIT>
}

void StringLiteral() : {}
{
    <FPLIT>
}
*/
void BooleanLiteral() : {}
{
    "true" | "false"
}

void NullLiteral() : {}
{
    "null"
}



void Block() : {}
{
    "{" BlockStatements() "}"
}

void BlockStatements() #void : {}
{
    (BlockStatement())*
}

void BlockStatement() #void : {}
{
    LOOKAHEAD(2)
    LocalVariableDeclarationStatement() |
    Statement()
}

void LocalVariableDeclarationStatement() : {}
{
    Type() VariableDeclarators() ";"
}

void Statement() #void : {}
{
    Block() |
    ExpressionStatement() |
    ReturnStatement()
}

void ReturnStatement() : {}
{
    "return" Expression() ";"
}

void ExpressionStatement() : {}
{
    Expression() ";"
}

void VariableDeclarators() #void : {}
{
    VariableDeclarator() ("," VariableDeclarator())*
}

void VariableDeclarator() : {}
{
    Identifier() ["=" VariableInitializer()]
}

void VariableInitializer() #void : {}
{
    Expression()
    // | ArrayInitializer()
}



void Identifier() : {
    Token t;
}
{
    t=<ID> { jjtThis.setIdentifier( t.image ); }
}
