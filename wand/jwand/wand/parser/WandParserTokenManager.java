/* Generated By:JJTree&JavaCC: Do not edit this line. WandParserTokenManager.java */
package wand.parser;

/** Token Manager. */
public class WandParserTokenManager implements WandParserConstants
{
    static int commentNesting=0;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000400000440L) != 0L)
            return 0;
         if ((active0 & 0xdfc0080001c0e000L) != 0L || (active1 & 0xfffL) != 0L)
         {
            jjmatchedKind = 77;
            return 13;
         }
         return -1;
      case 1:
         if ((active0 & 0x80000004000L) != 0L || (active1 & 0x5L) != 0L)
            return 13;
         if ((active0 & 0xdfc0000001c0a000L) != 0L || (active1 & 0xffaL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 1;
            }
            return 13;
         }
         if ((active0 & 0x400L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0xdfc0000001c0a000L) != 0L || (active1 & 0xf3aL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 2;
            }
            return 13;
         }
         if ((active0 & 0x4000L) != 0L || (active1 & 0xc0L) != 0L)
            return 13;
         return -1;
      case 3:
         if ((active0 & 0xdfc0000001008000L) != 0L || (active1 & 0xfa8L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 3;
            return 13;
         }
         if ((active0 & 0xc02000L) != 0L || (active1 & 0x12L) != 0L)
            return 13;
         return -1;
      case 4:
         if ((active0 & 0xd7c0000000000000L) != 0L || (active1 & 0x680L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
            return 13;
         }
         if ((active0 & 0x800000001008000L) != 0L || (active1 & 0x928L) != 0L)
            return 13;
         return -1;
      case 5:
         if ((active0 & 0xd240000000000000L) != 0L)
            return 13;
         if ((active0 & 0x580000000000000L) != 0L || (active1 & 0x680L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
            return 13;
         }
         return -1;
      case 6:
         if ((active0 & 0x500000000000000L) != 0L || (active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
            return 13;
         }
         if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x80L) != 0L)
            return 13;
         return -1;
      case 7:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 7;
            return 13;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x200L) != 0L)
            return 13;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x42000000000L, 0x0L);
      case 37:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 38:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2080000L);
      case 40:
         return jjStopAtPos(0, 25);
      case 41:
         return jjStopAtPos(0, 26);
      case 42:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 43:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0xa0000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 79);
      case 45:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x140000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 78);
      case 47:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x400000440L, 0x0L);
      case 58:
         return jjStopAtPos(0, 61);
      case 59:
         return jjStopAtPos(0, 76);
      case 60:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x20400000L);
      case 61:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 62:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x19800000L);
      case 63:
         return jjStopAtPos(0, 82);
      case 91:
         return jjStopAtPos(0, 80);
      case 93:
         return jjStopAtPos(0, 81);
      case 94:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8400000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x200L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800000001008000L, 0xc0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80000004000L, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x400L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1c0000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x820L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 123:
         return jjStopAtPos(0, 27);
      case 124:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x100000L);
      case 125:
         return jjStopAtPos(0, 28);
      case 126:
         return jjStopAtPos(0, 94);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 43:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      case 45:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 20);
         break;
      case 60:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L);
      case 61:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 62:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x9800000L);
      case 94:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0x400L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 102:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 64, 13);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800040000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0x2L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0x20L);
      case 111:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 66, 13);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000002000L, active1, 0x2d0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000800000L, active1, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000400000L, active1, 0L);
      case 124:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(2, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         break;
      case 62:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000002000L, active1, 0x808L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1400000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x400L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000008000L, active1, 0x10L);
      case 114:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8400000000000000L, active1, 0x2L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 13);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 88);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000008000L, active1, 0x100L);
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 13);
         break;
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 13);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x480L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      case 112:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x700000000000000L, active1, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1080000000000000L, active1, 0x80L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 13);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x240000000000000L, active1, 0x200L);
      case 107:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 13);
         break;
      case 108:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 13);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 13);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc400000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 13);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0x80L);
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 116:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 13);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 13);
         break;
      case 104:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 13);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 13);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 56, 13);
         break;
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 74, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 20:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddStates(3, 6);
                  }
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar != 48)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddStates(3, 6);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(16, 11);
                  break;
               case 17:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(17, 11);
                  break;
               case 19:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(19, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 20:
               case 1:
                  jjCheckNAddStates(0, 2);
                  break;
               case 5:
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(13);
                  break;
               case 11:
                  if ((0x100000001000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 15:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(16, 11);
                  break;
               case 18:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 20:
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      case 47:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   1, 2, 4, 15, 17, 11, 18, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\166\157\151\144", "\151\156\164", "\146\154\157\141\164", null, null, null, null, null, null, 
"\156\165\154\154", "\164\162\165\145", "\146\141\154\163\145", "\50", "\51", "\173", "\175", 
"\53\53", "\55\55", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\75\75", 
"\41\75", "\74\75", "\74", "\76\75", "\76", "\41\151\156", "\151\156", "\136\136", 
"\136", "\53", "\55", "\52", "\57", "\45", "\75", "\174\174", "\174", 
"\160\165\142\154\151\143", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", 
"\163\164\141\164\151\143", "\141\142\163\164\162\141\143\164", "\146\151\156\141\154", 
"\143\157\155\160\141\164", "\72", "\162\145\164\165\162\156", "\141\163\163\145\162\164", "\151\146", 
"\145\154\163\145", "\144\157", "\167\150\151\154\145", "\154\157\157\160", 
"\165\156\164\151\154", "\146\157\162", "\146\157\162\145\141\143\150", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\156\141\155\145\163\160\141\143\145", "\165\163\151\156\147", "\73", null, 
"\56", "\54", "\133", "\135", "\77", "\46\75", "\174\75", "\136\75", "\74\74\75", 
"\76\76\75", "\76\76\76\75", "\46\46", "\46", "\76\76\76", "\76\76", "\74\74", "\176", 
"\41", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_COMMENT",
   "IN_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffc3e001L, 0xffffffffL, 
};
static final long[] jjtoSkip = {
   0xffeL, 0x0L, 
};
static final long[] jjtoMore = {
   0x1000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[20];
private final int[] jjstateSet = new int[40];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public WandParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public WandParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 20; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           commentNesting++;
         break;
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           commentNesting++;
         break;
      case 8 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        commentNesting--;
        if (commentNesting == 0)
            SwitchTo(DEFAULT);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
