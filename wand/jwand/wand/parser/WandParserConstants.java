/* Generated By:JJTree&JavaCC: Do not edit this line. WandParserConstants.java */
package wand.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface WandParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int VOID = 7;
  /** RegularExpression Id. */
  int INT = 8;
  /** RegularExpression Id. */
  int FLOAT = 9;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 10;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 11;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 12;
  /** RegularExpression Id. */
  int HEX_LITERAL = 13;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 14;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 15;
  /** RegularExpression Id. */
  int LPAREN = 19;
  /** RegularExpression Id. */
  int RPAREN = 20;
  /** RegularExpression Id. */
  int OPENBLOCK = 21;
  /** RegularExpression Id. */
  int CLOSEBLOCK = 22;
  /** RegularExpression Id. */
  int OP_INC = 23;
  /** RegularExpression Id. */
  int OP_DEC = 24;
  /** RegularExpression Id. */
  int OP_ADD_ASSIGN = 25;
  /** RegularExpression Id. */
  int OP_SUB_ASSIGN = 26;
  /** RegularExpression Id. */
  int OP_MUL_ASSIGN = 27;
  /** RegularExpression Id. */
  int OP_DIV_ASSIGN = 28;
  /** RegularExpression Id. */
  int OP_MOD_ASSIGN = 29;
  /** RegularExpression Id. */
  int OP_EQUALS = 30;
  /** RegularExpression Id. */
  int OP_NOT_EQUAL = 31;
  /** RegularExpression Id. */
  int OP_CMP_LTE = 32;
  /** RegularExpression Id. */
  int OP_CMP_LT = 33;
  /** RegularExpression Id. */
  int OP_CMP_GTE = 34;
  /** RegularExpression Id. */
  int OP_CMP_GT = 35;
  /** RegularExpression Id. */
  int OP_NOT_IN = 36;
  /** RegularExpression Id. */
  int OP_IN = 37;
  /** RegularExpression Id. */
  int OP_ADD = 38;
  /** RegularExpression Id. */
  int OP_SUB = 39;
  /** RegularExpression Id. */
  int OP_MUL = 40;
  /** RegularExpression Id. */
  int OP_DIV = 41;
  /** RegularExpression Id. */
  int OP_MOD = 42;
  /** RegularExpression Id. */
  int OP_ASSIGN = 43;
  /** RegularExpression Id. */
  int OP_LOGICAL_OR = 44;
  /** RegularExpression Id. */
  int OP_BITWISE_OR = 45;
  /** RegularExpression Id. */
  int MODIFIER_PUBLIC = 46;
  /** RegularExpression Id. */
  int MODIFIER_PRIVATE = 47;
  /** RegularExpression Id. */
  int MODIFIER_PROTECTED = 48;
  /** RegularExpression Id. */
  int MODIFIER_STATIC = 49;
  /** RegularExpression Id. */
  int MODIFIER_ABSTRACT = 50;
  /** RegularExpression Id. */
  int MODIFIER_FINAL = 51;
  /** RegularExpression Id. */
  int MODIFIER_COMPAT = 52;
  /** RegularExpression Id. */
  int MODIFIER_ARG = 53;
  /** RegularExpression Id. */
  int STMT_RETURN = 54;
  /** RegularExpression Id. */
  int STMT_ASSERT = 55;
  /** RegularExpression Id. */
  int STMT_IF = 56;
  /** RegularExpression Id. */
  int STMT_ELSE = 57;
  /** RegularExpression Id. */
  int STMT_DO = 58;
  /** RegularExpression Id. */
  int STMT_WHILE = 59;
  /** RegularExpression Id. */
  int STMT_FOR = 60;
  /** RegularExpression Id. */
  int STMT_FOREACH = 61;
  /** RegularExpression Id. */
  int END_STMT = 62;
  /** RegularExpression Id. */
  int ID = 63;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"void\"",
    "\"int\"",
    "\"float\"",
    "<FLOAT_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<BINARY_LITERAL>",
    "<OCTAL_LITERAL>",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"++\"",
    "\"--\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\"<\"",
    "\">=\"",
    "\">\"",
    "\"!in\"",
    "\"in\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"||\"",
    "\"|\"",
    "\"public\"",
    "\"private\"",
    "\"protected\"",
    "\"static\"",
    "\"abstract\"",
    "\"final\"",
    "\"compat\"",
    "\":\"",
    "\"return\"",
    "\"assert\"",
    "\"if\"",
    "\"else\"",
    "\"do\"",
    "\"while\"",
    "\"for\"",
    "\"foreach\"",
    "\";\"",
    "<ID>",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"?\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"&&\"",
    "\"^\"",
    "\"&\"",
    "\">>>\"",
    "\">>\"",
    "\"<<\"",
    "\"~\"",
    "\"^^\"",
    "\"!\"",
  };

}
