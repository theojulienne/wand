/* Generated By:JJTree&JavaCC: Do not edit this line. WandParserConstants.java */
package wand.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface WandParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 11;
  /** RegularExpression Id. */
  int VOID = 13;
  /** RegularExpression Id. */
  int INT = 14;
  /** RegularExpression Id. */
  int FLOAT = 15;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 16;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 17;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 18;
  /** RegularExpression Id. */
  int HEX_LITERAL = 19;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 20;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 21;
  /** RegularExpression Id. */
  int LPAREN = 25;
  /** RegularExpression Id. */
  int RPAREN = 26;
  /** RegularExpression Id. */
  int OPENBLOCK = 27;
  /** RegularExpression Id. */
  int CLOSEBLOCK = 28;
  /** RegularExpression Id. */
  int OP_INC = 29;
  /** RegularExpression Id. */
  int OP_DEC = 30;
  /** RegularExpression Id. */
  int OP_ADD_ASSIGN = 31;
  /** RegularExpression Id. */
  int OP_SUB_ASSIGN = 32;
  /** RegularExpression Id. */
  int OP_MUL_ASSIGN = 33;
  /** RegularExpression Id. */
  int OP_DIV_ASSIGN = 34;
  /** RegularExpression Id. */
  int OP_MOD_ASSIGN = 35;
  /** RegularExpression Id. */
  int OP_EQUALS = 36;
  /** RegularExpression Id. */
  int OP_NOT_EQUAL = 37;
  /** RegularExpression Id. */
  int OP_CMP_LTE = 38;
  /** RegularExpression Id. */
  int OP_CMP_LT = 39;
  /** RegularExpression Id. */
  int OP_CMP_GTE = 40;
  /** RegularExpression Id. */
  int OP_CMP_GT = 41;
  /** RegularExpression Id. */
  int OP_NOT_IN = 42;
  /** RegularExpression Id. */
  int OP_IN = 43;
  /** RegularExpression Id. */
  int OP_POW = 44;
  /** RegularExpression Id. */
  int OP_XOR = 45;
  /** RegularExpression Id. */
  int OP_ADD = 46;
  /** RegularExpression Id. */
  int OP_SUB = 47;
  /** RegularExpression Id. */
  int OP_MUL = 48;
  /** RegularExpression Id. */
  int OP_DIV = 49;
  /** RegularExpression Id. */
  int OP_MOD = 50;
  /** RegularExpression Id. */
  int OP_ASSIGN = 51;
  /** RegularExpression Id. */
  int OP_LOGICAL_OR = 52;
  /** RegularExpression Id. */
  int OP_BITWISE_OR = 53;
  /** RegularExpression Id. */
  int OP_CAST = 54;
  /** RegularExpression Id. */
  int MODIFIER_PUBLIC = 55;
  /** RegularExpression Id. */
  int MODIFIER_PRIVATE = 56;
  /** RegularExpression Id. */
  int MODIFIER_PROTECTED = 57;
  /** RegularExpression Id. */
  int MODIFIER_STATIC = 58;
  /** RegularExpression Id. */
  int MODIFIER_ABSTRACT = 59;
  /** RegularExpression Id. */
  int MODIFIER_FINAL = 60;
  /** RegularExpression Id. */
  int MODIFIER_COMPAT = 61;
  /** RegularExpression Id. */
  int MODIFIER_ARG = 62;
  /** RegularExpression Id. */
  int STMT_RETURN = 63;
  /** RegularExpression Id. */
  int STMT_ASSERT = 64;
  /** RegularExpression Id. */
  int STMT_IF = 65;
  /** RegularExpression Id. */
  int STMT_ELSE = 66;
  /** RegularExpression Id. */
  int STMT_DO = 67;
  /** RegularExpression Id. */
  int STMT_WHILE = 68;
  /** RegularExpression Id. */
  int STMT_LOOP = 69;
  /** RegularExpression Id. */
  int STMT_UNTIL = 70;
  /** RegularExpression Id. */
  int STMT_FOR = 71;
  /** RegularExpression Id. */
  int STMT_FOREACH = 72;
  /** RegularExpression Id. */
  int STMT_BREAK = 73;
  /** RegularExpression Id. */
  int STMT_CONTINUE = 74;
  /** RegularExpression Id. */
  int DECL_NAMESPACE = 75;
  /** RegularExpression Id. */
  int STMT_USING = 76;
  /** RegularExpression Id. */
  int DECL_CLASS = 77;
  /** RegularExpression Id. */
  int DECL_EXTENDS = 78;
  /** RegularExpression Id. */
  int DECL_IMPLEMENTS = 79;
  /** RegularExpression Id. */
  int END_STMT = 80;
  /** RegularExpression Id. */
  int ID = 81;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;
  /** Lexical state. */
  int IN_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 9>",
    "\"//\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 12>",
    "\"void\"",
    "\"int\"",
    "\"float\"",
    "<FLOAT_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<BINARY_LITERAL>",
    "<OCTAL_LITERAL>",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"++\"",
    "\"--\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\"<\"",
    "\">=\"",
    "\">\"",
    "\"!in\"",
    "\"in\"",
    "\"^^\"",
    "\"^\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"||\"",
    "\"|\"",
    "\"cast\"",
    "\"public\"",
    "\"private\"",
    "\"protected\"",
    "\"static\"",
    "\"abstract\"",
    "\"final\"",
    "\"compat\"",
    "\":\"",
    "\"return\"",
    "\"assert\"",
    "\"if\"",
    "\"else\"",
    "\"do\"",
    "\"while\"",
    "\"loop\"",
    "\"until\"",
    "\"for\"",
    "\"foreach\"",
    "\"break\"",
    "\"continue\"",
    "\"namespace\"",
    "\"using\"",
    "\"class\"",
    "\"extends\"",
    "\"implements\"",
    "\";\"",
    "<ID>",
    "\".\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\"?\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"&&\"",
    "\"&\"",
    "\">>>\"",
    "\">>\"",
    "\"<<\"",
    "\"~\"",
    "\"!\"",
  };

}
