/* Generated By:JJTree&JavaCC: Do not edit this line. WandParser.java */
package wand.parser;

public class WandParser/*@bgen(jjtree)*/implements WandParserTreeConstants, WandParserConstants {/*@bgen(jjtree)*/
  protected JJTWandParserState jjtree = new JJTWandParserState();

/* *** Context-free grammar (EBNF) *** */

/* The start nonterminal and its productions. */
  final public ASTProgram Program() throws ParseException {
                        /*@bgen(jjtree) Program */
    ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ASTDeclarations declarations;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECL_NAMESPACE:
        NamespaceDeclaration();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      Declarations();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

/* Other nonterminals and their productions */

// Declarations -> Declaration [Declarations]
  final public void Declarations() throws ParseException {
                       /*@bgen(jjtree) Declarations */
    ASTDeclarations jjtn000 = new ASTDeclarations(JJTDECLARATIONS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ASTDeclaration declaration;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case INT:
        case FLOAT:
        case MODIFIER_PUBLIC:
        case MODIFIER_PRIVATE:
        case MODIFIER_PROTECTED:
        case MODIFIER_STATIC:
        case MODIFIER_ABSTRACT:
        case MODIFIER_FINAL:
        case MODIFIER_COMPAT:
        case STMT_USING:
        case ID:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        Declaration();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NamespaceDeclaration() throws ParseException {
                               /*@bgen(jjtree) NamespaceDeclaration */
  ASTNamespaceDeclaration jjtn000 = new ASTNamespaceDeclaration(JJTNAMESPACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECL_NAMESPACE);
      QualifiedNamespaceName();
      jj_consume_token(END_STMT);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// Declaration -> FunctionDeclaration
  final public void Declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    case INT:
    case FLOAT:
    case MODIFIER_PUBLIC:
    case MODIFIER_PRIVATE:
    case MODIFIER_PROTECTED:
    case MODIFIER_STATIC:
    case MODIFIER_ABSTRACT:
    case MODIFIER_FINAL:
    case MODIFIER_COMPAT:
    case ID:
      DecoratedFunctionDeclaration();
      break;
    case STMT_USING:
      UsingStatement();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UsingStatement() throws ParseException {
                         /*@bgen(jjtree) UsingStatement */
  ASTUsingStatement jjtn000 = new ASTUsingStatement(JJTUSINGSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STMT_USING);
      QualifiedNamespaceName();
      jj_consume_token(END_STMT);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void QualifiedNamespaceName() throws ParseException {
                                 /*@bgen(jjtree) QualifiedNamespaceName */
  ASTQualifiedNamespaceName jjtn000 = new ASTQualifiedNamespaceName(JJTQUALIFIEDNAMESPACENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NamespaceName();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 72:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(72);
        NamespaceName();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NamespaceName() throws ParseException {
                        /*@bgen(jjtree) NamespaceName */
    ASTNamespaceName jjtn000 = new ASTNamespaceName(JJTNAMESPACENAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setName( t.image );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DecoratedFunctionDeclaration() throws ParseException {
                                       /*@bgen(jjtree) DecoratedFunctionDeclaration */
  ASTDecoratedFunctionDeclaration jjtn000 = new ASTDecoratedFunctionDeclaration(JJTDECORATEDFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Modifiers();
      FunctionDeclaration();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Modifiers() throws ParseException {
                    /*@bgen(jjtree) Modifiers */
  ASTModifiers jjtn000 = new ASTModifiers(JJTMODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MODIFIER_PUBLIC:
        case MODIFIER_PRIVATE:
        case MODIFIER_PROTECTED:
        case MODIFIER_STATIC:
        case MODIFIER_ABSTRACT:
        case MODIFIER_FINAL:
        case MODIFIER_COMPAT:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        Modifier();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Modifier() throws ParseException {
                   /*@bgen(jjtree) Modifier */
  ASTModifier jjtn000 = new ASTModifier(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODIFIER_PUBLIC:
        jj_consume_token(MODIFIER_PUBLIC);
        break;
      case MODIFIER_PRIVATE:
        jj_consume_token(MODIFIER_PRIVATE);
        break;
      case MODIFIER_PROTECTED:
        jj_consume_token(MODIFIER_PROTECTED);
        break;
      case MODIFIER_STATIC:
        jj_consume_token(MODIFIER_STATIC);
        break;
      case MODIFIER_ABSTRACT:
        jj_consume_token(MODIFIER_ABSTRACT);
        break;
      case MODIFIER_FINAL:
        jj_consume_token(MODIFIER_FINAL);
        break;
      case MODIFIER_COMPAT:
        jj_consume_token(MODIFIER_COMPAT);
        jj_consume_token(MODIFIER_ARG);
        jj_consume_token(ID);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// FunctionDeclaration -> "void" Identifier "(" ")" "{" FunctionBody "}"
  final public void FunctionDeclaration() throws ParseException {
                              /*@bgen(jjtree) FunctionDeclaration */
        ASTFunctionDeclaration jjtn000 = new ASTFunctionDeclaration(JJTFUNCTIONDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token functionName;
    try {
      Type();
      functionName = jj_consume_token(ID);
      FunctionParameters();
      BlockStatement();
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.setFunctionName( functionName.image );
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FunctionParameters() throws ParseException {
                             /*@bgen(jjtree) FunctionParameters */
  ASTFunctionParameters jjtn000 = new ASTFunctionParameters(JJTFUNCTIONPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case INT:
      case FLOAT:
      case ID:
        FunctionParameter();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 73:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_4;
          }
          jj_consume_token(73);
          FunctionParameter();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FunctionParameter() throws ParseException {
                            /*@bgen(jjtree) FunctionParameter */
  ASTFunctionParameter jjtn000 = new ASTFunctionParameter(JJTFUNCTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ASSIGN:
        jj_consume_token(OP_ASSIGN);
        VariableInitializer();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// FunctionBody -> FunctionDeclaration
/*ASTFunctionBody FunctionBody() : {}
{
    { return jjtThis; }
}*/

// Type ->
  final public void Type() throws ParseException {
    if (jj_2_1(2)) {
      ArrayType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case INT:
      case FLOAT:
      case ID:
        BuiltinType();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void BuiltinType() throws ParseException {
                      /*@bgen(jjtree) BuiltinType */
    ASTBuiltinType jjtn000 = new ASTBuiltinType(JJTBUILTINTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        t = jj_consume_token(VOID);
        break;
      case INT:
        t = jj_consume_token(INT);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case ID:
        t = jj_consume_token(ID);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setTypeName( t.image );
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ArrayType() throws ParseException {
                    /*@bgen(jjtree) ArrayType */
  ASTArrayType jjtn000 = new ASTArrayType(JJTARRAYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BuiltinType();
      label_5:
      while (true) {
        jj_consume_token(74);
        jj_consume_token(75);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 74:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void QualifiedIdentifier() throws ParseException {
                                                       /*@bgen(jjtree) #QualifiedIdentifier(> 1) */
  ASTQualifiedIdentifier jjtn000 = new ASTQualifiedIdentifier(JJTQUALIFIEDIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 72:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        jj_consume_token(72);
        jj_consume_token(ID);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      IntegerLiteral();
      break;
    case FLOAT_LITERAL:
      FloatingPointLiteral();
      break;
    case 17:
    case 18:
      BooleanLiteral();
      break;
    case 16:
      NullLiteral();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression() throws ParseException {
    AssignExpression();
  }

  final public void AssignExpression() throws ParseException {
                                                 /*@bgen(jjtree) #AssignExpression(> 1) */
  ASTAssignExpression jjtn000 = new ASTAssignExpression(JJTASSIGNEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2)) {
        Identifier();
        AssignOperator();
        AssignExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT_LITERAL:
        case INTEGER_LITERAL:
        case 16:
        case 17:
        case 18:
        case LPAREN:
        case OP_INC:
        case OP_DEC:
        case OP_ADD:
        case OP_SUB:
        case OP_MUL:
        case ID:
        case 84:
        case 88:
        case 89:
          ConditionalExpression();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void ConditionalExpression() throws ParseException {
                                                           /*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OrOrExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
        jj_consume_token(76);
        Expression();
        jj_consume_token(MODIFIER_ARG);
        ConditionalExpression();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void OrOrExpression() throws ParseException {
                                              /*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndAndExpression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_LOGICAL_OR:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        OrOrOperator();
        AndAndExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void AndAndExpression() throws ParseException {
                                                /*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OrExpression();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
        AndAndOperator();
        OrExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void OrExpression() throws ParseException {
                                            /*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      XorExpression();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_BITWISE_OR:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        OrOperator();
        XorExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void XorExpression() throws ParseException {
                                             /*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpression();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_XOR:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
        XorOperator();
        AndExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void AndExpression() throws ParseException {
                                             /*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CmpExpression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 84:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_11;
        }
        AndOperator();
        CmpExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void CmpExpression() throws ParseException {
                                             /*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ShiftExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_EQUALS:
      case OP_NOT_EQUAL:
      case OP_CMP_LTE:
      case OP_CMP_LT:
      case OP_CMP_GTE:
      case OP_CMP_GT:
      case OP_NOT_IN:
      case OP_IN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_EQUALS:
        case OP_NOT_EQUAL:
          EqualExpressionRest();
          break;
        case OP_CMP_LTE:
        case OP_CMP_LT:
        case OP_CMP_GTE:
        case OP_CMP_GT:
          RelExpressionRest();
          break;
        case OP_NOT_IN:
        case OP_IN:
          InExpressionRest();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void ShiftExpression() throws ParseException {
                                               /*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AddExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
        case 86:
        case 87:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_12;
        }
        ShiftOperator();
        AddExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void EqualExpressionRest() throws ParseException {
    EqualOperator();
    ShiftExpression();
  }

  final public void RelExpressionRest() throws ParseException {
    RelOperator();
    ShiftExpression();
  }

  final public void InExpressionRest() throws ParseException {
    InOperator();
    ShiftExpression();
  }

  final public void CatExpression() throws ParseException {
                                             /*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MulExpression();
      CatOperator();
      MulExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void AddExpression() throws ParseException {
                                             /*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MulExpression();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_ADD:
        case OP_SUB:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_13;
        }
        AddOperator();
        MulExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void MulExpression() throws ParseException {
                                             /*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PowExpression();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_MUL:
        case OP_DIV:
        case OP_MOD:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_14;
        }
        MulInfixOperator();
        PowExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void PowExpression() throws ParseException {
                                             /*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_POW:
        PowOperator();
        PowExpression();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
                                               /*@bgen(jjtree) #UnaryExpression(> 1) */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT_LITERAL:
      case INTEGER_LITERAL:
      case 16:
      case 17:
      case 18:
      case LPAREN:
      case ID:
        PostfixExpression();
        break;
      case OP_INC:
      case OP_DEC:
      case OP_ADD:
      case OP_SUB:
      case OP_MUL:
      case 84:
      case 88:
      case 89:
        UnaryOperator();
        UnaryExpression();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void PostfixExpression() throws ParseException {
                                                   /*@bgen(jjtree) #PostfixExpression(> 1) */
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpression();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_INC:
        case OP_DEC:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_15;
        }
        PostfixOperator();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

/*
void InfixExpression() #InfixExpression(>1) : {}
{
    MulInfixExpression() (InfixOperator() InfixExpression())*
}

void MulInfixExpression() #InfixExpression(>1) : {}
{
    PrefixExpression() [MulInfixOperator() MulInfixExpression()]
}

void PrefixExpression() #PrefixExpression(>1) : {}
{
    PrefixOperator() PrefixExpression() |
    PostfixExpression()
}

void PostfixExpression() #PostfixExpression(>1) : {}
{
    PrimaryExpression() (PostfixOperator())*
    
}*/
  final public void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    case FLOAT_LITERAL:
    case INTEGER_LITERAL:
    case 16:
    case 17:
    case 18:
      Literal();
      break;
    case ID:
      FunctionCall();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FunctionCall() throws ParseException {
                                         /*@bgen(jjtree) #FunctionCall(> 1) */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QualifiedIdentifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        Arguments();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void Arguments() throws ParseException {
                    /*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT_LITERAL:
      case INTEGER_LITERAL:
      case 16:
      case 17:
      case 18:
      case LPAREN:
      case OP_INC:
      case OP_DEC:
      case OP_ADD:
      case OP_SUB:
      case OP_MUL:
      case ID:
      case 84:
      case 88:
      case 89:
        Expression();
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 73:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_16;
        }
        jj_consume_token(73);
        Expression();
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AssignOperator() throws ParseException {
                         /*@bgen(jjtree) AssignOperator */
    ASTAssignOperator jjtn000 = new ASTAssignOperator(JJTASSIGNOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ASSIGN:
        t = jj_consume_token(OP_ASSIGN);
        break;
      case OP_ADD_ASSIGN:
        t = jj_consume_token(OP_ADD_ASSIGN);
        break;
      case OP_SUB_ASSIGN:
        t = jj_consume_token(OP_SUB_ASSIGN);
        break;
      case OP_MUL_ASSIGN:
        t = jj_consume_token(OP_MUL_ASSIGN);
        break;
      case OP_DIV_ASSIGN:
        t = jj_consume_token(OP_DIV_ASSIGN);
        break;
      case 77:
        t = jj_consume_token(77);
        break;
      case 78:
        t = jj_consume_token(78);
        break;
      case 79:
        t = jj_consume_token(79);
        break;
      case OP_MOD_ASSIGN:
        t = jj_consume_token(OP_MOD_ASSIGN);
        break;
      case 80:
        t = jj_consume_token(80);
        break;
      case 81:
        t = jj_consume_token(81);
        break;
      case 82:
        t = jj_consume_token(82);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AddOperator() throws ParseException {
                                     /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ADD:
        t = jj_consume_token(OP_ADD);
        break;
      case OP_SUB:
        t = jj_consume_token(OP_SUB);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MulInfixOperator() throws ParseException {
                                          /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_MUL:
        t = jj_consume_token(OP_MUL);
        break;
      case OP_DIV:
        t = jj_consume_token(OP_DIV);
        break;
      case OP_MOD:
        t = jj_consume_token(OP_MOD);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void OrOrOperator() throws ParseException {
                                      /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OP_LOGICAL_OR);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AndAndOperator() throws ParseException {
                                        /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(83);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void OrOperator() throws ParseException {
                                    /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OP_BITWISE_OR);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void XorOperator() throws ParseException {
                                     /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OP_XOR);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AndOperator() throws ParseException {
                                     /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(84);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ShiftOperator() throws ParseException {
                                       /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 85:
        t = jj_consume_token(85);
        break;
      case 86:
        t = jj_consume_token(86);
        break;
      case 87:
        t = jj_consume_token(87);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void EqualOperator() throws ParseException {
                                       /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_EQUALS:
        t = jj_consume_token(OP_EQUALS);
        break;
      case OP_NOT_EQUAL:
        t = jj_consume_token(OP_NOT_EQUAL);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RelOperator() throws ParseException {
                                     /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_CMP_LT:
        t = jj_consume_token(OP_CMP_LT);
        break;
      case OP_CMP_LTE:
        t = jj_consume_token(OP_CMP_LTE);
        break;
      case OP_CMP_GT:
        t = jj_consume_token(OP_CMP_GT);
        break;
      case OP_CMP_GTE:
        t = jj_consume_token(OP_CMP_GTE);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void InOperator() throws ParseException {
                                    /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_IN:
        t = jj_consume_token(OP_IN);
        break;
      case OP_NOT_IN:
        t = jj_consume_token(OP_NOT_IN);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CatOperator() throws ParseException {
                                     /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(88);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PowOperator() throws ParseException {
                                     /*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OP_POW);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void UnaryOperator() throws ParseException {
                        /*@bgen(jjtree) UnaryOperator */
  ASTUnaryOperator jjtn000 = new ASTUnaryOperator(JJTUNARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 84:
        jj_consume_token(84);
        break;
      case OP_INC:
        jj_consume_token(OP_INC);
        break;
      case OP_DEC:
        jj_consume_token(OP_DEC);
        break;
      case OP_MUL:
        jj_consume_token(OP_MUL);
        break;
      case OP_SUB:
        jj_consume_token(OP_SUB);
        break;
      case OP_ADD:
        jj_consume_token(OP_ADD);
        break;
      case 89:
        jj_consume_token(89);
        break;
      case 88:
        jj_consume_token(88);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PostfixOperator() throws ParseException {
                          /*@bgen(jjtree) PostfixOperator */
    ASTPostfixOperator jjtn000 = new ASTPostfixOperator(JJTPOSTFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_INC:
        t = jj_consume_token(OP_INC);
        break;
      case OP_DEC:
        t = jj_consume_token(OP_DEC);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTokenType( t.kind );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IntegerLiteral() throws ParseException {
                         /*@bgen(jjtree) IntegerLiteral */
    ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.fromString( t.image );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FloatingPointLiteral() throws ParseException {
                               /*@bgen(jjtree) FloatingPointLiteral */
  ASTFloatingPointLiteral jjtn000 = new ASTFloatingPointLiteral(JJTFLOATINGPOINTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FLOAT_LITERAL);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/*
void CharacterLiteral() : {}
{
    <FPLIT>
}

void StringLiteral() : {}
{
    <FPLIT>
}
*/
  final public void BooleanLiteral() throws ParseException {
                         /*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
        break;
      case 18:
        jj_consume_token(18);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NullLiteral() throws ParseException {
                      /*@bgen(jjtree) NullLiteral */
  ASTNullLiteral jjtn000 = new ASTNullLiteral(JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(16);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/*
void Block() : {}
{
    "{" BlockStatements() "}"
}

void BlockStatements() #void : {}
{
    (BlockStatement())*
}

void BlockStatement() #void : {}
{
    LOOKAHEAD(2)
    LocalVariableDeclarationStatement() |
    Statement()
}
*/
  final public void LocalVariableDeclarationStatement() throws ParseException {
                                            /*@bgen(jjtree) LocalVariableDeclarationStatement */
  ASTLocalVariableDeclarationStatement jjtn000 = new ASTLocalVariableDeclarationStatement(JJTLOCALVARIABLEDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      VariableDeclarators();
      jj_consume_token(END_STMT);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END_STMT:
      jj_consume_token(END_STMT);
      break;
    case VOID:
    case INT:
    case FLOAT:
    case FLOAT_LITERAL:
    case INTEGER_LITERAL:
    case 16:
    case 17:
    case 18:
    case LPAREN:
    case OP_INC:
    case OP_DEC:
    case OP_ADD:
    case OP_SUB:
    case OP_MUL:
    case STMT_RETURN:
    case STMT_ASSERT:
    case STMT_IF:
    case STMT_DO:
    case STMT_WHILE:
    case STMT_LOOP:
    case STMT_BREAK:
    case STMT_CONTINUE:
    case ID:
    case 84:
    case 88:
    case 89:
      NonEmptyStatement();
      break;
    case OPENBLOCK:
      ScopeBlockStatement();
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ScopeBlockStatement() throws ParseException {
    BlockStatement();
  }

  final public void BlockStatement() throws ParseException {
                         /*@bgen(jjtree) BlockStatement */
  ASTBlockStatement jjtn000 = new ASTBlockStatement(JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPENBLOCK);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case INT:
        case FLOAT:
        case FLOAT_LITERAL:
        case INTEGER_LITERAL:
        case 16:
        case 17:
        case 18:
        case LPAREN:
        case OPENBLOCK:
        case OP_INC:
        case OP_DEC:
        case OP_ADD:
        case OP_SUB:
        case OP_MUL:
        case STMT_RETURN:
        case STMT_ASSERT:
        case STMT_IF:
        case STMT_DO:
        case STMT_WHILE:
        case STMT_LOOP:
        case STMT_BREAK:
        case STMT_CONTINUE:
        case END_STMT:
        case ID:
        case 84:
        case 88:
        case 89:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_17;
        }
        Statement();
      }
      jj_consume_token(CLOSEBLOCK);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IfStatement() throws ParseException {
                      /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STMT_IF);
      jj_consume_token(LPAREN);
      IfCondition();
      jj_consume_token(RPAREN);
      ThenStatement();
      if (jj_2_3(2)) {
        jj_consume_token(STMT_ELSE);
        ElseStatement();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IfCondition() throws ParseException {
    Expression();
  }

  final public void ThenStatement() throws ParseException {
    ScopeStatement();
  }

  final public void ElseStatement() throws ParseException {
    ScopeStatement();
  }

  final public void ScopeStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    case INT:
    case FLOAT:
    case FLOAT_LITERAL:
    case INTEGER_LITERAL:
    case 16:
    case 17:
    case 18:
    case LPAREN:
    case OP_INC:
    case OP_DEC:
    case OP_ADD:
    case OP_SUB:
    case OP_MUL:
    case STMT_RETURN:
    case STMT_ASSERT:
    case STMT_IF:
    case STMT_DO:
    case STMT_WHILE:
    case STMT_LOOP:
    case STMT_BREAK:
    case STMT_CONTINUE:
    case ID:
    case 84:
    case 88:
    case 89:
      NonEmptyStatement();
      break;
    case OPENBLOCK:
      BlockStatement();
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NonEmptyStatement() throws ParseException {
    if (jj_2_4(2)) {
      ExpressionStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STMT_RETURN:
        ReturnStatement();
        break;
      case STMT_ASSERT:
        AssertStatement();
        break;
      case STMT_IF:
        IfStatement();
        break;
      case STMT_WHILE:
        WhileStatement();
        break;
      case STMT_DO:
        DoWhileStatement();
        break;
      case STMT_LOOP:
        LoopStatement();
        break;
      case STMT_BREAK:
        BreakStatement();
        break;
      case STMT_CONTINUE:
        ContinueStatement();
        break;
      case VOID:
      case INT:
      case FLOAT:
      case ID:
        LocalVariableDeclarationStatement();
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void WhileStatement() throws ParseException {
                         /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STMT_WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      ScopeStatement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DoWhileStatement() throws ParseException {
                           /*@bgen(jjtree) DoWhileStatement */
  ASTDoWhileStatement jjtn000 = new ASTDoWhileStatement(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STMT_DO);
      ScopeStatement();
      jj_consume_token(STMT_WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(END_STMT);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LoopStatement() throws ParseException {
                        /*@bgen(jjtree) LoopStatement */
  ASTLoopStatement jjtn000 = new ASTLoopStatement(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STMT_LOOP);
      ScopeStatement();
      if (jj_2_5(2)) {
        jj_consume_token(STMT_UNTIL);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(END_STMT);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BreakStatement() throws ParseException {
                         /*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STMT_BREAK);
      jj_consume_token(END_STMT);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ContinueStatement() throws ParseException {
                            /*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STMT_CONTINUE);
      jj_consume_token(END_STMT);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AssertStatement() throws ParseException {
                          /*@bgen(jjtree) AssertStatement */
  ASTAssertStatement jjtn000 = new ASTAssertStatement(JJTASSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STMT_ASSERT);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODIFIER_ARG:
        jj_consume_token(MODIFIER_ARG);
        Expression();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(END_STMT);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ReturnStatement() throws ParseException {
                          /*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STMT_RETURN);
      Expression();
      jj_consume_token(END_STMT);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ExpressionStatement() throws ParseException {
                              /*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = new ASTExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jj_consume_token(END_STMT);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VariableDeclarators() throws ParseException {
    VariableDeclarator();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_18;
      }
      jj_consume_token(73);
      VariableDeclarator();
    }
  }

  final public void VariableDeclarator() throws ParseException {
                             /*@bgen(jjtree) VariableDeclarator */
  ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ASSIGN:
        jj_consume_token(OP_ASSIGN);
        VariableInitializer();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VariableInitializer() throws ParseException {
    Expression();
  }

  final public void Identifier() throws ParseException {
                     /*@bgen(jjtree) Identifier */
    ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.setIdentifier( t.image );
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(STMT_CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(STMT_BREAK)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(STMT_LOOP)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_79()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(STMT_DO)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(STMT_ELSE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(STMT_WHILE)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(OP_XOR)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(STMT_IF)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(OPENBLOCK)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(OP_BITWISE_OR)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(OP_LOGICAL_OR)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(16)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_24()) return true;
    Token xsp;
    if (jj_3R_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_111()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(OP_POW)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(STMT_UNTIL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(END_STMT)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(STMT_RETURN)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(STMT_ASSERT)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_98()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_83()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public WandParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x380,0x380,0x0,0x0,0x0,0x0,0x380,0x0,0x380,0x380,0x0,0x0,0x70c00,0x18f0c00,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x18f0c00,0x1800000,0xf0c00,0x80000,0x18f0c00,0x0,0x3e000000,0x0,0x0,0x0,0xc0000000,0x0,0x0,0x1800000,0x1800000,0x60000,0x1af0f80,0x1af0f80,0x1af0f80,0x380,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x7f0000,0x7f0000,0x0,0x7f0000,0x7f0000,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x700,0x0,0x4000,0x0,0x8000,0x80,0x0,0x3f,0x3f,0x0,0x300,0x1c00,0x40,0x700,0x0,0x0,0x0,0x700,0x0,0x2000,0x300,0x1c00,0x0,0x0,0xf,0x30,0x700,0x0,0x0,0x77000700,0x77000700,0x77000700,0x77000000,0x800000,0x0,0x2000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x10,0xa0,0xa0,0x100,0x0,0x0,0x200,0x80,0x0,0x80,0x80,0x400,0x100,0x0,0x3100080,0x1000,0x0,0x80000,0x0,0x0,0x100000,0x0,0x0,0xe00000,0x0,0x0,0x0,0x3100080,0x0,0x80,0x0,0x3100080,0x200,0x7e000,0x0,0x0,0xe00000,0x0,0x0,0x0,0x3100000,0x0,0x0,0x31000cc,0x31000cc,0x310008c,0x8c,0x0,0x200,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public WandParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WandParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new WandParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public WandParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WandParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public WandParser(WandParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(WandParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[90];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 50; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 90; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                         }
