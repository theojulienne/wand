/* Generated By:JJTree: Do not edit this line. ASTFunctionDeclaration.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=wand.core.WandNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package wand.parser;

import wand.generators.*;
import wand.core.*;

public
class ASTFunctionDeclaration extends ASTDeclaration implements WandFunctionDeclaration {
    private ASTModifiers modifiers = null;
    private String functionName = null;
    private WandNamespace namespace = null;
    
    public ASTFunctionDeclaration(int id) {
        super(id);
    }

    public ASTFunctionDeclaration(WandParser p, int id) {
        super(p, id);
    }
    
    public Generator getGenerator( ) {
        return GeneratorFactory.getGeneratorFactory( ).getFunctionGenerator( );
    }
    
    public void setFunctionName( String name ) {
        this.functionName = name;
    }
    
    public String getFunctionName( ) {
        return this.functionName;
    }
    
    public ASTType getReturnType( ) {
        return (ASTType) jjtGetChild( 0 );
    }
    
    public ASTFunctionParameters getFunctionParameters( ) {
        return (ASTFunctionParameters) jjtGetChild( 1 );
    }
    
    public WandTypeSet getParameterTypeSet( ) {
        WandTypeSet paramTypes = new WandTypeSet( );
        
        for ( WandNode child: getFunctionParameters( ) ) {
            ASTFunctionParameter param = (ASTFunctionParameter)child;
            
            ASTType typeNode = param.getType( );
            WandType type = typeNode.getType( );
            
            paramTypes.addType( type );
        }
        
        return paramTypes;
    }
    
    public ASTBlockStatement getFunctionBody( ) {
        return (ASTBlockStatement) jjtGetChild( 2 );
    }
    
    public void setFunctionModifiers( ASTModifiers modifiers ) {
        this.modifiers = modifiers;
    }
    
    public ASTModifiers getFunctionModifiers( ) {
        return modifiers;
    }
    
    public boolean hasModifier( int kind ) {
        return getFunctionModifiers( ).hasModifier( kind );
    }
    
    public String getModifierMeta( int kind ) {
        return getFunctionModifiers( ).getModifierMeta( kind );
    }
    
    public String toString( ) {
        return "<ASTFunctionDeclaration: " + getFunctionName() + ">";
    }
    
    public void setNamespace( WandNamespace namespace ) {
        this.namespace = namespace;
    }
    
    public WandNamespace getNamespace( ) {
        return this.namespace;
    }
    
    /** Accept the visitor. **/
    public Object jjtAccept(WandParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

}
/* JavaCC - OriginalChecksum=5f943141d3ae60d1bd20a16b105fcd86 (do not edit this line) */
