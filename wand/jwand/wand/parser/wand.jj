/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. wand.jj */
/*@egen*/options {
               
	                                  
	                           
	             
}


/* *** Specification of the parser class *** */

PARSER_BEGIN(WandParser)
package wand.parser;

public class WandParser/*@bgen(jjtree)*/implements WandParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTWandParserState jjtree = new JJTWandParserState();

/*@egen*/}
PARSER_END(WandParser)

/* *** Token specification *** */

/* Skip whitespace */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

/* Reserved words */
TOKEN: {
	< VOID: "void">
|	< INT: "int">
|	< FLOAT: "float">
}

/* Literals */
TOKEN: {
  < FLOAT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])+ >    // Floating point literal
| < INTEGER_LITERAL:
      <DECIMAL_LITERAL> (["l","L"])?
    | <HEX_LITERAL> (["l","L"])?
    | <OCTAL_LITERAL> (["l","L"])?
    | <BINARY_LITERAL> (["l","L"])?
  >

| < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
| < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
| < #BINARY_LITERAL: "0" ["b","B"] (["0"-"1"])+ >
| < #OCTAL_LITERAL: "0" (["0"-"7"])* >

| "null"
| "true"
| "false"
}

/* Operators */
TOKEN: {
  < LPAREN: "(" >
| < RPAREN: ")" >
| < OPENBLOCK: "{" >
| < CLOSEBLOCK: "}" >

| < OP_INC: "++" >
| < OP_DEC: "--" >

| < OP_ADD_ASSIGN: "+=" >
| < OP_SUB_ASSIGN: "-=" >

| < OP_MUL_ASSIGN: "*=" >
| < OP_DIV_ASSIGN: "/=" >
| < OP_MOD_ASSIGN: "%=" >

| < OP_EQUALS: "==" >
| < OP_NOT_EQUAL: "!=" >

| < OP_CMP_LTE: "<=" >
| < OP_CMP_LT: "<" >
| < OP_CMP_GTE: ">=" >
| < OP_CMP_GT: ">" >

| < OP_NOT_IN: "!in" >
| < OP_IN: "in" >

| < OP_POW: "^^" >
| < OP_XOR: "^" >
| < OP_ADD: "+" >
| < OP_SUB: "-" >

| < OP_MUL: "*" >
| < OP_DIV: "/" >
| < OP_MOD: "%" >

| < OP_ASSIGN: "=" >

| < OP_LOGICAL_OR: "||" >
| < OP_BITWISE_OR: "|" >

| < MODIFIER_PUBLIC: "public" >
| < MODIFIER_PRIVATE: "private" >
| < MODIFIER_PROTECTED: "protected" >
| < MODIFIER_STATIC: "static" >
| < MODIFIER_ABSTRACT: "abstract" >
| < MODIFIER_FINAL: "final" >
| < MODIFIER_COMPAT: "compat" >

| < MODIFIER_ARG: ":" >

| < STMT_RETURN: "return" >
| < STMT_ASSERT: "assert" >

| < STMT_IF: "if" >
| < STMT_ELSE: "else" >
| < STMT_DO: "do" >
| < STMT_WHILE: "while" >
| < STMT_LOOP: "loop" >
| < STMT_UNTIL: "until" >
| < STMT_FOR: "for" >
| < STMT_FOREACH: "foreach" >
| < STMT_BREAK: "break" >
| < STMT_CONTINUE: "continue" >

| < DECL_NAMESPACE: "namespace" >
| < STMT_USING: "using" >

| < END_STMT: ";" >

}

/* Identifiers */
TOKEN: {
  < ID: (["A"-"Z", "a"-"z", "_"])(["A"-"Z", "a"-"z", "_", "0"-"9"])* >
}

/* *** Context-free grammar (EBNF) *** */

/* The start nonterminal and its productions. */

ASTProgram Program() : {/*@bgen(jjtree) Program */
    ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTDeclarations declarations;
}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    [NamespaceDeclaration()] Declarations()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/* Other nonterminals and their productions */

// Declarations -> Declaration [Declarations]
void Declarations() : {/*@bgen(jjtree) Declarations */
    ASTDeclarations jjtn000 = new ASTDeclarations(JJTDECLARATIONS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTDeclaration declaration;
}
{/*@bgen(jjtree) Declarations */
    try {
/*@egen*/
    ( Declaration() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NamespaceDeclaration() : {/*@bgen(jjtree) NamespaceDeclaration */
  ASTNamespaceDeclaration jjtn000 = new ASTNamespaceDeclaration(JJTNAMESPACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NamespaceDeclaration */
    try {
/*@egen*/
    "namespace" QualifiedNamespaceName() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// Declaration -> FunctionDeclaration
void Declaration()       : {}
{
	DecoratedFunctionDeclaration() |
	UsingStatement()
}

void UsingStatement() : {/*@bgen(jjtree) UsingStatement */
  ASTUsingStatement jjtn000 = new ASTUsingStatement(JJTUSINGSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UsingStatement */
    try {
/*@egen*/
    "using" QualifiedNamespaceName() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void QualifiedNamespaceName() : {/*@bgen(jjtree) QualifiedNamespaceName */
  ASTQualifiedNamespaceName jjtn000 = new ASTQualifiedNamespaceName(JJTQUALIFIEDNAMESPACENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) QualifiedNamespaceName */
    try {
/*@egen*/
    NamespaceName() ("." NamespaceName())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NamespaceName() : {/*@bgen(jjtree) NamespaceName */
  ASTNamespaceName jjtn000 = new ASTNamespaceName(JJTNAMESPACENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NamespaceName */
    try {
/*@egen*/
    <ID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DecoratedFunctionDeclaration() : {/*@bgen(jjtree) DecoratedFunctionDeclaration */
  ASTDecoratedFunctionDeclaration jjtn000 = new ASTDecoratedFunctionDeclaration(JJTDECORATEDFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DecoratedFunctionDeclaration */
    try {
/*@egen*/
    Modifiers() FunctionDeclaration()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Modifiers() : {/*@bgen(jjtree) Modifiers */
  ASTModifiers jjtn000 = new ASTModifiers(JJTMODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Modifiers */
    try {
/*@egen*/
    (Modifier())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Modifier() : {/*@bgen(jjtree) Modifier */
  ASTModifier jjtn000 = new ASTModifier(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Modifier */
    try {
/*@egen*/
    "public" |
    "private" |
    "protected" |
    "static" |
    "abstract" |
    "final" |
    "compat" ":" <ID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// FunctionDeclaration -> "void" Identifier "(" ")" "{" FunctionBody "}"
void FunctionDeclaration() : {/*@bgen(jjtree) FunctionDeclaration */
        ASTFunctionDeclaration jjtn000 = new ASTFunctionDeclaration(JJTFUNCTIONDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token functionName;
}
{/*@bgen(jjtree) FunctionDeclaration */
        try {
/*@egen*/
	(
	    Type() functionName=<ID> FunctionParameters() BlockStatement()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/
	    { jjtn000.setFunctionName( functionName.image ); }
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FunctionParameters() : {/*@bgen(jjtree) FunctionParameters */
  ASTFunctionParameters jjtn000 = new ASTFunctionParameters(JJTFUNCTIONPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionParameters */
    try {
/*@egen*/
    <LPAREN> [FunctionParameter() ("," FunctionParameter())*] <RPAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionParameter() : {/*@bgen(jjtree) FunctionParameter */
  ASTFunctionParameter jjtn000 = new ASTFunctionParameter(JJTFUNCTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionParameter */
    try {
/*@egen*/
    Type() Identifier() ["=" VariableInitializer()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// FunctionBody -> FunctionDeclaration
/*ASTFunctionBody FunctionBody() : {}
{
    { return jjtThis; }
}*/

// Type ->
void Type()       : {}
{
    LOOKAHEAD(2)
    ArrayType() |
	BuiltinType()
}

void BuiltinType() : {/*@bgen(jjtree) BuiltinType */
    ASTBuiltinType jjtn000 = new ASTBuiltinType(JJTBUILTINTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) BuiltinType */
        try {
/*@egen*/
	(
	    t="void" | 
	    t="int" | 
	    t="float" | 
	    t=<ID>
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ jjtn000.setTypeName( t.image ); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayType() : {/*@bgen(jjtree) ArrayType */
  ASTArrayType jjtn000 = new ASTArrayType(JJTARRAYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayType */
        try {
/*@egen*/
	BuiltinType() ("[" "]")+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}





void QualifiedIdentifier()                          : {/*@bgen(jjtree) #QualifiedIdentifier(> 1) */
  ASTQualifiedIdentifier jjtn000 = new ASTQualifiedIdentifier(JJTQUALIFIEDIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #QualifiedIdentifier(> 1) */
    try {
/*@egen*/
    (
        Identifier() ("." <ID>)*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void Literal()       : {}
{
    (
        IntegerLiteral() |
        FloatingPointLiteral() |
        /*CharacterLiteral() |
        StringLiteral() |*/
        BooleanLiteral() |
        NullLiteral()
    )
}

void Expression()       : {}
{
    AssignExpression()
}

void AssignExpression()                       : {/*@bgen(jjtree) #AssignExpression(> 1) */
  ASTAssignExpression jjtn000 = new ASTAssignExpression(JJTASSIGNEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AssignExpression(> 1) */
    try {
/*@egen*/
    // was: InfixExpression() [AssignOperator() InfixExpression()]
    // but this allowed syntax "3 += 1" which would be invalid and need
    // to be picked up elsewhere
    LOOKAHEAD(2)
    Identifier() AssignOperator() AssignExpression() |
    ConditionalExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void ConditionalExpression()                            : {/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
    try {
/*@egen*/
    OrOrExpression() ["?" Expression() ":" ConditionalExpression()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void OrOrExpression()                      : {/*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InfixExpression(> 1) */
    try {
/*@egen*/
    AndAndExpression() (OrOrOperator() AndAndExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void AndAndExpression()                      : {/*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InfixExpression(> 1) */
    try {
/*@egen*/
    OrExpression() (AndAndOperator() OrExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void OrExpression()                      : {/*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InfixExpression(> 1) */
    try {
/*@egen*/
    XorExpression() (OrOperator() XorExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void XorExpression()                      : {/*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InfixExpression(> 1) */
    try {
/*@egen*/
    AndExpression() (XorOperator() AndExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void AndExpression()                      : {/*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InfixExpression(> 1) */
    try {
/*@egen*/
    CmpExpression() (AndOperator() CmpExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void CmpExpression()                      : {/*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InfixExpression(> 1) */
    try {
/*@egen*/
    ShiftExpression() [EqualExpressionRest() | RelExpressionRest() | InExpressionRest()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void ShiftExpression()                      : {/*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InfixExpression(> 1) */
    try {
/*@egen*/
    AddExpression() (ShiftOperator() AddExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void EqualExpressionRest()       : {}
{
    EqualOperator() ShiftExpression()
}

void RelExpressionRest()       : {}
{
    RelOperator() ShiftExpression()
}

void InExpressionRest()      : {}
{
    InOperator() ShiftExpression()
}

void CatExpression()                      : {/*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InfixExpression(> 1) */
    try {
/*@egen*/
    MulExpression() CatOperator() MulExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void AddExpression()                      : {/*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InfixExpression(> 1) */
    try {
/*@egen*/
    MulExpression() (AddOperator() MulExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void MulExpression()                      : {/*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InfixExpression(> 1) */
    try {
/*@egen*/
    PowExpression() (MulInfixOperator() PowExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void PowExpression()                      : {/*@bgen(jjtree) #InfixExpression(> 1) */
  ASTInfixExpression jjtn000 = new ASTInfixExpression(JJTINFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InfixExpression(> 1) */
    try {
/*@egen*/
    UnaryExpression() [PowOperator() PowExpression()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void UnaryExpression()                      : {/*@bgen(jjtree) #UnaryExpression(> 1) */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #UnaryExpression(> 1) */
    try {
/*@egen*/
    PostfixExpression() |
    UnaryOperator() UnaryExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void PostfixExpression()                        : {/*@bgen(jjtree) #PostfixExpression(> 1) */
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #PostfixExpression(> 1) */
    try {
/*@egen*/
    PrimaryExpression() (PostfixOperator())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

/*
void InfixExpression() #InfixExpression(>1) : {}
{
    MulInfixExpression() (InfixOperator() InfixExpression())*
}

void MulInfixExpression() #InfixExpression(>1) : {}
{
    PrefixExpression() [MulInfixOperator() MulInfixExpression()]
}

void PrefixExpression() #PrefixExpression(>1) : {}
{
    PrefixOperator() PrefixExpression() |
    PostfixExpression()
}

void PostfixExpression() #PostfixExpression(>1) : {}
{
    PrimaryExpression() (PostfixOperator())*
    
}*/

void PrimaryExpression()       : {}
{
    <LPAREN> Expression() <RPAREN> |
    Literal() |
    FunctionCall()
}

void FunctionCall()                   : {/*@bgen(jjtree) #FunctionCall(> 1) */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #FunctionCall(> 1) */
    try {
/*@egen*/
    QualifiedIdentifier() [Arguments()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void Arguments() : {/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arguments */
    try {
/*@egen*/
    <LPAREN> [Expression()] ("," Expression())* <RPAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void AssignOperator() : {/*@bgen(jjtree) AssignOperator */
    ASTAssignOperator jjtn000 = new ASTAssignOperator(JJTASSIGNOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) AssignOperator */
    try {
/*@egen*/
    (
        t="=" |
        t="+=" |
        t="-=" |
        t="*=" |
        t="/=" |
        t="&=" |
        t="|=" |
        t="^=" |
        t="%=" |
        t="<<=" |
        t=">>=" |
        t=">>>="
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AddOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    (
        t="+" |
        t="-"
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MulInfixOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    (
        t="*" |
        t="/" |
        t="%"
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OrOrOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    t="||"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AndAndOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    t="&&"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OrOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    t="|"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void XorOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    t="^"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AndOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    t="&"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ShiftOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    (
        t=">>>" |
        t=">>" |
        t="<<"
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EqualOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    (
        t="==" |
        t="!="
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RelOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    (
        t="<" |
        t="<=" |
        t=">" |
        t=">="
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void InOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    (
        t="in" |
        t="!in"
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CatOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    (
        t="~"
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PowOperator()                : {/*@bgen(jjtree) InfixOperator */
    ASTInfixOperator jjtn000 = new ASTInfixOperator(JJTINFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) InfixOperator */
    try {
/*@egen*/
    (
        t="^^"
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnaryOperator() : {/*@bgen(jjtree) UnaryOperator */
  ASTUnaryOperator jjtn000 = new ASTUnaryOperator(JJTUNARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryOperator */
    try {
/*@egen*/
    "&" |
    "++" |
    "--" |
    "*" |
    "-" |
    "+" |
    "!" |
    "~"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PostfixOperator() : {/*@bgen(jjtree) PostfixOperator */
    ASTPostfixOperator jjtn000 = new ASTPostfixOperator(JJTPOSTFIXOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) PostfixOperator */
    try {
/*@egen*/
    (
        t="++" |
        t="--"
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { jjtn000.setTokenType( t.kind ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



void IntegerLiteral() : {/*@bgen(jjtree) IntegerLiteral */
    ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) IntegerLiteral */
    try {
/*@egen*/
    t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.fromString( t.image ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FloatingPointLiteral() : {/*@bgen(jjtree) FloatingPointLiteral */
  ASTFloatingPointLiteral jjtn000 = new ASTFloatingPointLiteral(JJTFLOATINGPOINTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FloatingPointLiteral */
    try {
/*@egen*/
    <FLOAT_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*
void CharacterLiteral() : {}
{
    <FPLIT>
}

void StringLiteral() : {}
{
    <FPLIT>
}
*/
void BooleanLiteral() : {/*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanLiteral */
    try {
/*@egen*/
    "true" | "false"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NullLiteral() : {/*@bgen(jjtree) NullLiteral */
  ASTNullLiteral jjtn000 = new ASTNullLiteral(JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NullLiteral */
    try {
/*@egen*/
    "null"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


/*
void Block() : {}
{
    "{" BlockStatements() "}"
}

void BlockStatements() #void : {}
{
    (BlockStatement())*
}

void BlockStatement() #void : {}
{
    LOOKAHEAD(2)
    LocalVariableDeclarationStatement() |
    Statement()
}
*/

void LocalVariableDeclarationStatement() : {/*@bgen(jjtree) LocalVariableDeclarationStatement */
  ASTLocalVariableDeclarationStatement jjtn000 = new ASTLocalVariableDeclarationStatement(JJTLOCALVARIABLEDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LocalVariableDeclarationStatement */
    try {
/*@egen*/
    Type() VariableDeclarators() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statement()       : {}
{
    ";" |
    NonEmptyStatement() |
    ScopeBlockStatement()
}

void ScopeBlockStatement()       : {}
{
    BlockStatement()
}

void BlockStatement() : {/*@bgen(jjtree) BlockStatement */
  ASTBlockStatement jjtn000 = new ASTBlockStatement(JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BlockStatement */
    try {
/*@egen*/
    "{" (Statement())* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IfStatement() : {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
    try {
/*@egen*/
    "if" "(" IfCondition() ")" ThenStatement() [LOOKAHEAD(2) "else" ElseStatement()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IfCondition()       : {}
{
    Expression()
}

void ThenStatement()       : {}
{
    ScopeStatement()
}

void ElseStatement()       : {}
{
    ScopeStatement()
}

void ScopeStatement()       : {}
{
    NonEmptyStatement() |
    BlockStatement()
}

void NonEmptyStatement()       : {}
{
    LOOKAHEAD(2)
    ExpressionStatement() |
    ReturnStatement() |
    AssertStatement() |
    IfStatement() |
    WhileStatement() |
    DoWhileStatement() |
    LoopStatement() |
    BreakStatement() |
    ContinueStatement() |
    LocalVariableDeclarationStatement()
}

void WhileStatement() : {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
    try {
/*@egen*/
    "while" "(" Expression() ")" ScopeStatement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DoWhileStatement() : {/*@bgen(jjtree) DoWhileStatement */
  ASTDoWhileStatement jjtn000 = new ASTDoWhileStatement(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoWhileStatement */
    try {
/*@egen*/
    "do" ScopeStatement() "while" "(" Expression() ")" ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LoopStatement() : {/*@bgen(jjtree) LoopStatement */
  ASTLoopStatement jjtn000 = new ASTLoopStatement(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LoopStatement */
    try {
/*@egen*/
    "loop" ScopeStatement() [LOOKAHEAD(2) "until" "(" Expression() ")" ";"]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BreakStatement() : {/*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BreakStatement */
    try {
/*@egen*/
    "break" ";"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ContinueStatement() : {/*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContinueStatement */
    try {
/*@egen*/
    "continue" ";"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AssertStatement() : {/*@bgen(jjtree) AssertStatement */
  ASTAssertStatement jjtn000 = new ASTAssertStatement(JJTASSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssertStatement */
    try {
/*@egen*/
    "assert" Expression() [":" Expression()] ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ReturnStatement() : {/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
    try {
/*@egen*/
    "return" Expression() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ExpressionStatement() : {/*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = new ASTExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionStatement */
    try {
/*@egen*/
    Expression() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VariableDeclarators()       : {}
{
    VariableDeclarator() ("," VariableDeclarator())*
}

void VariableDeclarator() : {/*@bgen(jjtree) VariableDeclarator */
  ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDeclarator */
    try {
/*@egen*/
    Identifier() ["=" VariableInitializer()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VariableInitializer()       : {}
{
    Expression()
    // | ArrayInitializer()
}



void Identifier() : {/*@bgen(jjtree) Identifier */
    ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    t=<ID>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ { jjtn000.setIdentifier( t.image ); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
