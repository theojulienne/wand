/* Generated By:JJTree: Do not edit this line. ASTInfixExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=wand.core.WandNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package wand.parser;

import wand.core.*;

public
class ASTInfixExpression extends ASTExpression {
    public ASTInfixExpression(int id) {
        super(id);
    }
    
    public ASTInfixExpression(WandParser p, int id) {
        super(p, id);
    }
    
    public WandNode getLHS( ) {
        return (WandNode) jjtGetChild( 0 );
    }
    
    public WandNode getRHS( ) {
        return (WandNode) jjtGetChild( 2 );
    }
    
    public ASTInfixOperator getOperator( ) {
        return (ASTInfixOperator) jjtGetChild( 1 );
    }
    
    public WandType getExpressionType() {
        WandNode lhs = getLHS( );
        WandNode rhs = getRHS( );
        
        WandType leftType = lhs.getExpressionType();
        WandType rightType = lhs.getExpressionType();
        
        assert leftType != null && rightType != null: "Both operands ("+lhs+" and "+rhs+") should have a type!";
        
        // FIXME: precedence?
        
        return leftType;
    }
    
    /** Accept the visitor. **/
    public Object jjtAccept(WandParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
/* JavaCC - OriginalChecksum=7f65dc88d2c5346ea6ea778bcfadfcf0 (do not edit this line) */
